// lab2
// сжатие строки

void stringCompress(char* src) {
    char* original;
    original = src;
    char* rst;
    rst = src;

    int histogram[256];
    for (int i = 0; i < 256; i++) {
        histogram[i] = 0;
    }
    int length = 0;
    while (*src != NULL) {
        length++;
        src++;
    }
    src = original;
    int j = 0;

    for (int i = 0; i < length; i++) {

        histogram[(int)src[i]]++;
        if (histogram[(int)src[i]] == 1) {
            rst[j] = src[i];
                j++;
             }

    }
    rst[j] = '\0';

    char* final;

    rst = original;
    int index = 0;
    char buffer[33];

    for (int i = 0; i < j; i++) {

        final[index] = rst[i];

        stringstream number;
        number << histogram[(int)rst[i]];
        cout<<number.str()<<endl;
            char* temp = new char[number.str().length() + 1];
        strcpy(temp, number.str().c_str());
        index++;
        cout << temp << endl;
        for (int k = 0; k < number.str().length(); k++)
        {
            final[index] = temp[k];
            index++;

        }

    }

    //конец строки
    final[index] = '\0';
    src = original;

    if (index <= length) {
        for (int i = 0; i < index; i++)

            cout << final[i];
    }
    else {
        cout << src << endl;
    }

}

const N = 10
// Сортировка массива вставками
int Mas_2[N];
srand(10);
for (int i = 1; i < N; i++) Mas_2[i] = rand()%144;   // Заполняем Mas_2
int tmp;
for (int i = 1; i < N; i++)
    for (int j = i; j > 0 && x[j - 1] > x[j]; j--) // пока j>0 и элемент j-1 > j, x-массив int
    {                   // меняем местами элементы j и j-1
        tmp = x[j - 1];
        x[j - 1] = x[j];
        x[j] = tmp;
    }


#include <string>
#include <regex>
using namespace std;

string srt2_3 = "asdksdkdskkkkksdkkksdf"; // заполним строку
test = regex_replace(test, regex("kk"), "klm"); // заменим "kk" на "klm"
